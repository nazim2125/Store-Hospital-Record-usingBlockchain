{"ast":null,"code":"var _jsxFileName = \"/Users/nazimkhan/Downloads/mediChain-master 2/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\nimport MediChain from './contracts/MediChain.json';\nimport Dashboard from './components/Dashboard.js';\nimport Home from './components/Home.js';\nimport Login from './components/Login.js';\nimport Register from './components/Register.js';\nimport Footer from './components/Footer';\nimport SiteNavbar from './components/SiteNavbar';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// Pinata API credentials from .env\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PINATA_API_KEY = process.env.REACT_APP_PINATA_API_KEY;\nconst PINATA_API_SECRET = process.env.REACT_APP_PINATA_API_SECRET;\nconst PINATA_GATEWAY = 'https://gateway.pinata.cloud/ipfs';\nconst PINATA_UPLOAD_URL = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n\n// Pinata upload function\nconst uploadToPinata = async function (fileBuffer) {\n  let fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'file';\n  const data = new FormData();\n  const blob = new Blob([fileBuffer]);\n  data.append('file', blob, fileName);\n  try {\n    const res = await axios.post(PINATA_UPLOAD_URL, data, {\n      maxContentLength: 'Infinity',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        pinata_api_key: PINATA_API_KEY,\n        pinata_secret_api_key: PINATA_API_SECRET\n      }\n    });\n    return res.data.IpfsHash;\n  } catch (err) {\n    console.error('Pinata upload error:', err);\n    throw err;\n  }\n};\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [token, setToken] = useState('');\n  const [mediChain, setMediChain] = useState(null);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        setAccount(result[0]);\n      }).catch(error => {\n        console.log(error);\n      });\n      window.ethereum.on('chainChanged', () => window.location.reload());\n    } else {\n      alert('Please use Metamask or a Web3 enabled browser');\n    }\n  };\n  const getContractInstance = async () => {\n    const web3 = new Web3(window.ethereum || Web3.givenProvider || 'http://localhost:8545');\n    const networkId = await web3.eth.net.getId();\n    const networkData = MediChain.networks[networkId];\n    if (networkData) {\n      const mediChain = new web3.eth.Contract(MediChain.abi, networkData.address);\n      setMediChain(mediChain);\n      console.log(await mediChain.methods.name().call());\n    } else {\n      alert('Smart contract not deployed on this network');\n    }\n  };\n  useEffect(() => {\n    getContractInstance();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(SiteNavbar, {\n      token: token,\n      account: account,\n      setAccount: setAccount,\n      setToken: setToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {\n          mediChain: mediChain,\n          token: token,\n          setToken: setToken,\n          setAccount: setAccount,\n          connectWallet: connectWallet,\n          account: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(Dashboard, {\n          mediChain: mediChain,\n          token: token,\n          account: account,\n          uploadToPinata: uploadToPinata,\n          pinataGateway: PINATA_GATEWAY\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/register\",\n        element: /*#__PURE__*/_jsxDEV(Register, {\n          mediChain: mediChain,\n          uploadToPinata: uploadToPinata,\n          pinataGateway: PINATA_GATEWAY,\n          token: token,\n          setToken: setToken,\n          setAccount: setAccount,\n          connectWallet: connectWallet,\n          account: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xAextbxxIXK41DJumAqfdUVfltk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Web3","axios","Buffer","MediChain","Dashboard","Home","Login","Register","Footer","SiteNavbar","BrowserRouter","Router","Routes","Route","jsxDEV","_jsxDEV","PINATA_API_KEY","process","env","REACT_APP_PINATA_API_KEY","PINATA_API_SECRET","REACT_APP_PINATA_API_SECRET","PINATA_GATEWAY","PINATA_UPLOAD_URL","uploadToPinata","fileBuffer","fileName","arguments","length","undefined","data","FormData","blob","Blob","append","res","post","maxContentLength","headers","pinata_api_key","pinata_secret_api_key","IpfsHash","err","console","error","App","_s","account","setAccount","token","setToken","mediChain","setMediChain","connectWallet","window","ethereum","request","method","then","result","catch","log","on","location","reload","alert","getContractInstance","web3","givenProvider","networkId","eth","net","getId","networkData","networks","Contract","abi","address","methods","name","call","children","_jsxFileName","lineNumber","columnNumber","path","element","pinataGateway","_c","$RefreshReg$"],"sources":["/Users/nazimkhan/Downloads/mediChain-master 2/client/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\nimport MediChain from './contracts/MediChain.json';\nimport Dashboard from './components/Dashboard.js';\nimport Home from './components/Home.js';\nimport Login from './components/Login.js';\nimport Register from './components/Register.js';\nimport Footer from './components/Footer';\nimport SiteNavbar from './components/SiteNavbar';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// Pinata API credentials from .env\nconst PINATA_API_KEY = process.env.REACT_APP_PINATA_API_KEY;\nconst PINATA_API_SECRET = process.env.REACT_APP_PINATA_API_SECRET;\nconst PINATA_GATEWAY = 'https://gateway.pinata.cloud/ipfs';\nconst PINATA_UPLOAD_URL = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n\n// Pinata upload function\nconst uploadToPinata = async (fileBuffer, fileName = 'file') => {\n  const data = new FormData();\n  const blob = new Blob([fileBuffer]);\n  data.append('file', blob, fileName);\n  try {\n    const res = await axios.post(PINATA_UPLOAD_URL, data, {\n      maxContentLength: 'Infinity',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        pinata_api_key: PINATA_API_KEY,\n        pinata_secret_api_key: PINATA_API_SECRET,\n      },\n    });\n    return res.data.IpfsHash;\n  } catch (err) {\n    console.error('Pinata upload error:', err);\n    throw err;\n  }\n};\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [token, setToken] = useState('');\n  const [mediChain, setMediChain] = useState(null);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      window.ethereum.request({ method: 'eth_requestAccounts'})\n        .then(result => {\n          setAccount(result[0]);\n        })\n        .catch(error => {\n         console.log(error)\n        });\n      window.ethereum.on('chainChanged', () => window.location.reload());\n\t\t} else {\n\t\t\talert('Please use Metamask or a Web3 enabled browser');\n\t\t}\n  }\n\n  const getContractInstance = async () => {\n    const web3 = new Web3(window.ethereum || Web3.givenProvider || 'http://localhost:8545')\n    const networkId = await web3.eth.net.getId()\n    const networkData = MediChain.networks[networkId]\n    if(networkData){\n      const mediChain = new web3.eth.Contract(MediChain.abi, networkData.address)\n      setMediChain(mediChain)\n      console.log(await mediChain.methods.name().call())\n    }else{\n      alert('Smart contract not deployed on this network')\n    }\n  }\n\n  useEffect(() => {\n    getContractInstance()\n  }, [])\n\n  return (\n    <Router>\n      <SiteNavbar token={token} account={account} setAccount={setAccount} setToken={setToken}/>\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/login' element={<Login mediChain={mediChain} token={token} setToken={setToken} setAccount={setAccount} connectWallet={connectWallet} account={account}/>} />\n        <Route path='/dashboard' element={<Dashboard mediChain={mediChain} token={token} account={account} uploadToPinata={uploadToPinata} pinataGateway={PINATA_GATEWAY}/>} />\n        <Route path='/register' element={<Register mediChain={mediChain} uploadToPinata={uploadToPinata} pinataGateway={PINATA_GATEWAY} token={token} setToken={setToken} setAccount={setAccount} connectWallet={connectWallet} account={account} />} />\n      </Routes>\n      <Footer/>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}